@using RadzenBlazorDemos.Data
@using RadzenBlazorDemos.Models.Northwind
@using Microsoft.EntityFrameworkCore
@using System.Collections.ObjectModel
@using Microsoft.JSInterop

@inherits DbContextPage

@inject IJSRuntime JSRuntime;

<style>
    .my-class td {
        border-top: 1px solid black;
        border-bottom: 1px solid black;
    }
</style>

<RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" AllowSorting="true" PageSize="5" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
    Data="@employees" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or" SelectionMode="DataGridSelectionMode.Single"
                @bind-Value=@selectedEmployees RowRender="@RowRender">
    <Columns>
        <RadzenDataGridColumn Property="EmployeeID" Filterable="false" Title="ID" Frozen="true" Width="55px" TextAlign="TextAlign.Center" />
        <RadzenDataGridColumn Title="Photo" Frozen="true" Sortable="false" Filterable="false" Width="80px" TextAlign="TextAlign.Center" >
            <Template Context="data">
                <RadzenImage Path="@data.Photo" class="rz-gravatar" AlternateText="@(data.FirstName + " " + data.LastName)" />
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="FirstName" Title="First Name" Frozen="true" Width="160px" />
        <RadzenDataGridColumn Property="LastName" Title="Last Name" Width="160px"/>
        <RadzenDataGridColumn Property="Title" Title="Job Title" Width="200px" />
        <RadzenDataGridColumn Property="TitleOfCourtesy" Title="Title" Width="120px" />
        <RadzenDataGridColumn Property="BirthDate" Title="Birth Date" FormatString="{0:d}" Width="160px" />
        <RadzenDataGridColumn Property="HireDate" Title="Hire Date" FormatString="{0:d}" Width="160px" />
        <RadzenDataGridColumn Property="Address" Title="Address" Width="200px" />
        <RadzenDataGridColumn Property="City" Title="City" Width="160px" />
        <RadzenDataGridColumn Property="Region" Title="Region" Width="160px" />
        <RadzenDataGridColumn Property="PostalCode" Title="Postal Code" Width="160px" />
        <RadzenDataGridColumn Property="Country" Title="Country" Width="160px" />
        <RadzenDataGridColumn Property="HomePhone" Title="Home Phone" Width="160px" />
        <RadzenDataGridColumn Property="Extension" Title="Extension" Width="160px" />
        <RadzenDataGridColumn Property="Notes" Title="Notes" Width="300px" />
    </Columns>
</RadzenDataGrid>

@code {
    ObservableCollection<Employee> employees;
    IList<Employee> selectedEmployees;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        employees = new ObservableCollection<Employee>(dbContext.Employees);

        selectedEmployees = new List<Employee>(){ employees.FirstOrDefault() };
    }

    Employee draggedItem;

    void RowRender(RowRenderEventArgs<Employee> args)
    {
        args.Attributes.Add("title", "Drag row to reorder");
        args.Attributes.Add("style", "cursor:grab");
        args.Attributes.Add("draggable", "true");
        args.Attributes.Add("ondragover", "event.preventDefault();event.target.closest('.rz-data-row').classList.add('my-class')");
        args.Attributes.Add("ondragleave", "event.target.closest('.rz-data-row').classList.remove('my-class')");
        args.Attributes.Add("ondragstart", EventCallback.Factory.Create<DragEventArgs>(this, () => draggedItem = args.Data));
        args.Attributes.Add("ondrop", EventCallback.Factory.Create<DragEventArgs>(this, () =>
        {
            var draggedIndex = employees.IndexOf(draggedItem);
            var droppedIndex = employees.IndexOf(args.Data);
            employees.Remove(draggedItem);
            employees.Insert(draggedIndex <= droppedIndex ? droppedIndex++ : droppedIndex, draggedItem);

            JSRuntime.InvokeVoidAsync("eval", $"document.querySelector('.my-class').classList.remove('my-class')");
        }));
    }
}